basePath: /api/v1
definitions:
  models.Amenities:
    additionalProperties: true
    type: object
  models.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  models.County:
    properties:
      code:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      properties:
        items:
          $ref: '#/definitions/models.Property'
        type: array
      sub_counties:
        description: Relationships
        items:
          $ref: '#/definitions/models.SubCounty'
        type: array
    type: object
  models.CreatePropertyRequest:
    properties:
      amenities:
        $ref: '#/definitions/models.Amenities'
      availability_date:
        type: string
      bathrooms:
        minimum: 0
        type: integer
      bedrooms:
        minimum: 0
        type: integer
      county_id:
        type: integer
      deposit_amount:
        minimum: 0
        type: number
      description:
        type: string
      is_furnished:
        type: boolean
      latitude:
        type: number
      location_details:
        type: string
      longitude:
        type: number
      parking_spaces:
        minimum: 0
        type: integer
      property_type:
        $ref: '#/definitions/models.PropertyType'
      rent_amount:
        minimum: 0
        type: number
      square_meters:
        minimum: 0
        type: number
      sub_county_id:
        type: integer
      title:
        type: string
      utilities_included:
        $ref: '#/definitions/models.UtilitiesIncluded'
    required:
    - county_id
    - property_type
    - rent_amount
    - title
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      id_number:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
      user_type:
        $ref: '#/definitions/models.UserType'
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    - user_type
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Property:
    properties:
      agent:
        $ref: '#/definitions/models.User'
      agent_id:
        type: string
      amenities:
        $ref: '#/definitions/models.Amenities'
      availability_date:
        type: string
      bathrooms:
        type: integer
      bedrooms:
        type: integer
      county:
        allOf:
        - $ref: '#/definitions/models.County'
        description: Relationships
      county_id:
        type: integer
      created_at:
        type: string
      deposit_amount:
        type: number
      description:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/models.PropertyImage'
        type: array
      is_available:
        type: boolean
      is_furnished:
        type: boolean
      latitude:
        type: number
      location_details:
        type: string
      longitude:
        type: number
      parking_spaces:
        type: integer
      property_type:
        $ref: '#/definitions/models.PropertyType'
      rent_amount:
        type: number
      square_meters:
        type: number
      sub_county:
        $ref: '#/definitions/models.SubCounty'
      sub_county_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      utilities_included:
        $ref: '#/definitions/models.UtilitiesIncluded'
    type: object
  models.PropertyImage:
    properties:
      bytes:
        type: integer
      caption:
        type: string
      created_at:
        type: string
      display_order:
        type: integer
      format:
        type: string
      height:
        type: integer
      id:
        type: string
      image_url:
        type: string
      is_primary:
        type: boolean
      property:
        allOf:
        - $ref: '#/definitions/models.Property'
        description: Relationships
      property_id:
        type: string
      public_id:
        type: string
      secure_url:
        type: string
      width:
        type: integer
    type: object
  models.PropertyType:
    enum:
    - apartment
    - house
    - bedsitter
    - studio
    - maisonette
    - bungalow
    - villa
    - commercial
    type: string
    x-enum-varnames:
    - PropertyTypeApartment
    - PropertyTypeHouse
    - PropertyTypeBedsitter
    - PropertyTypeStudio
    - PropertyTypeMaisonette
    - PropertyTypeBungalow
    - PropertyTypeVilla
    - PropertyTypeCommercial
  models.ResetPasswordRequest:
    properties:
      confirm_password:
        type: string
      password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - confirm_password
    - password
    - token
    type: object
  models.SubCounty:
    properties:
      county:
        allOf:
        - $ref: '#/definitions/models.County'
        description: Relationships
      county_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      properties:
        items:
          $ref: '#/definitions/models.Property'
        type: array
    type: object
  models.UpdatePropertyRequest:
    properties:
      amenities:
        $ref: '#/definitions/models.Amenities'
      availability_date:
        type: string
      bathrooms:
        minimum: 0
        type: integer
      bedrooms:
        minimum: 0
        type: integer
      deposit_amount:
        minimum: 0
        type: number
      description:
        type: string
      is_available:
        type: boolean
      is_furnished:
        type: boolean
      latitude:
        type: number
      location_details:
        type: string
      longitude:
        type: number
      parking_spaces:
        minimum: 0
        type: integer
      rent_amount:
        minimum: 0
        type: number
      square_meters:
        minimum: 0
        type: number
      title:
        type: string
      utilities_included:
        $ref: '#/definitions/models.UtilitiesIncluded'
    type: object
  models.User:
    properties:
      approved_at:
        type: string
      approved_by:
        description: Admin who approved
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_approved:
        description: For agent approval by admin
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      phone_number:
        type: string
      profile_image_url:
        type: string
      properties:
        description: Relationships
        items:
          $ref: '#/definitions/models.Property'
        type: array
      updated_at:
        type: string
      user_type:
        $ref: '#/definitions/models.UserType'
    type: object
  models.UserResponse:
    properties:
      approved_at:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_approved:
        type: boolean
      is_verified:
        type: boolean
      last_name:
        type: string
      phone_number:
        type: string
      profile_image_url:
        type: string
      updated_at:
        type: string
      user_type:
        $ref: '#/definitions/models.UserType'
    type: object
  models.UserType:
    enum:
    - admin
    - tenant
    - agent
    type: string
    x-enum-varnames:
    - UserTypeAdmin
    - UserTypeTenant
    - UserTypeAgent
  models.UtilitiesIncluded:
    additionalProperties: true
    type: object
  models.VerifyEmailRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive API for managing real estate properties
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Real Estate API
  version: "1.0"
paths:
  /admin/agents:
    get:
      consumes:
      - application/json
      description: Get all agents (approved and pending)
      produces:
      - application/json
      responses:
        "200":
          description: All agents
          schema:
            properties:
              agents:
                items:
                  $ref: '#/definitions/models.UserResponse'
                type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get all agents
      tags:
      - Admin
  /admin/approve-agent/{agentId}:
    post:
      consumes:
      - application/json
      description: Approve an agent to allow property management
      parameters:
      - description: Agent ID
        in: path
        name: agentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agent approved successfully
          schema:
            properties:
              agent:
                $ref: '#/definitions/models.UserResponse'
              message:
                type: string
            type: object
        "400":
          description: Invalid agent ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Agent not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Approve an agent
      tags:
      - Admin
  /admin/pending-agents:
    get:
      consumes:
      - application/json
      description: Get all agents waiting for admin approval
      produces:
      - application/json
      responses:
        "200":
          description: Pending agents
          schema:
            properties:
              agents:
                items:
                  $ref: '#/definitions/models.UserResponse'
                type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get pending agents
      tags:
      - Admin
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password for authenticated user
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Forgot password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Request password reset
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using reset token
      parameters:
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or token
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Token not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Reset password
      tags:
      - auth
  /auth/validate-reset-token:
    get:
      consumes:
      - application/json
      description: Validate if a reset token is valid and not expired
      parameters:
      - description: Reset token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid or expired token
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Token not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Validate reset token
      tags:
      - auth
  /counties:
    get:
      consumes:
      - application/json
      description: Get a list of all counties in Kenya
      produces:
      - application/json
      responses:
        "200":
          description: List of counties
          schema:
            properties:
              counties:
                items:
                  $ref: '#/definitions/models.County'
                type: array
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get all counties
      tags:
      - Location
  /counties/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific county
      parameters:
      - description: County ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: County details
          schema:
            properties:
              county:
                $ref: '#/definitions/models.County'
            type: object
        "400":
          description: Invalid county ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: County not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get county by ID
      tags:
      - Location
  /counties/{id}/sub-counties:
    get:
      consumes:
      - application/json
      description: Get all sub-counties within a specific county
      parameters:
      - description: County ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of sub-counties
          schema:
            properties:
              county_id:
                type: integer
              sub_counties:
                items:
                  $ref: '#/definitions/models.SubCounty'
                type: array
            type: object
        "400":
          description: Invalid county ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: County not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get sub-counties by county ID
      tags:
      - Location
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                $ref: '#/definitions/models.UserResponse'
            type: object
        "400":
          description: Invalid request data
          schema:
            properties:
              details:
                type: string
              error:
                type: string
            type: object
        "401":
          description: Invalid credentials or account deactivated
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User login
      tags:
      - Authentication
  /my-properties:
    get:
      consumes:
      - application/json
      description: Get all properties managed by the authenticated agent
      parameters:
      - default: 20
        description: Number of results per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of results to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of landlord's properties
          schema:
            properties:
              properties:
                items:
                  $ref: '#/definitions/models.Property'
                type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get my properties
      tags:
      - Properties
  /profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            properties:
              user:
                $ref: '#/definitions/models.UserResponse'
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - Users
  /properties:
    get:
      consumes:
      - application/json
      description: Get a list of available properties with optional filtering and
        pagination
      parameters:
      - description: Filter by county ID
        in: query
        name: county_id
        type: integer
      - description: Filter by sub-county ID
        in: query
        name: sub_county_id
        type: integer
      - description: Filter by property type
        enum:
        - apartment
        - house
        - bedsitter
        - studio
        - maisonette
        - bungalow
        - villa
        - commercial
        in: query
        name: property_type
        type: string
      - description: Minimum rent amount
        in: query
        name: min_rent
        type: number
      - description: Maximum rent amount
        in: query
        name: max_rent
        type: number
      - description: Minimum number of bedrooms
        in: query
        name: min_bedrooms
        type: integer
      - description: Maximum number of bedrooms
        in: query
        name: max_bedrooms
        type: integer
      - description: Minimum number of bathrooms
        in: query
        name: min_bathrooms
        type: integer
      - description: Filter by furnished status
        in: query
        name: is_furnished
        type: boolean
      - description: Filter by parking availability
        in: query
        name: has_parking
        type: boolean
      - default: 20
        description: Number of results per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of results to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of properties
          schema:
            properties:
              limit:
                type: integer
              offset:
                type: integer
              properties:
                items:
                  $ref: '#/definitions/models.Property'
                type: array
              total:
                type: integer
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get public property listings
      tags:
      - Properties
    post:
      consumes:
      - application/json
      description: Create a new property listing (agent only)
      parameters:
      - description: Property data
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/models.CreatePropertyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Property created successfully
          schema:
            properties:
              message:
                type: string
              property:
                $ref: '#/definitions/models.Property'
            type: object
        "400":
          description: Invalid request data
          schema:
            properties:
              details:
                type: string
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Create a new property
      tags:
      - Properties
  /properties/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a property (landlord only)
      parameters:
      - description: Property ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Property deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid property ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: You can only delete your own properties
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Property not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Delete property
      tags:
      - Properties
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific property including images
      parameters:
      - description: Property ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Property details
          schema:
            properties:
              property:
                $ref: '#/definitions/models.Property'
            type: object
        "400":
          description: Invalid property ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Property not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get a property by ID
      tags:
      - Properties
    put:
      consumes:
      - application/json
      description: Update property information (landlord only)
      parameters:
      - description: Property ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Property update data
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePropertyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Property updated successfully
          schema:
            properties:
              message:
                type: string
              property:
                $ref: '#/definitions/models.Property'
            type: object
        "400":
          description: Invalid request data
          schema:
            properties:
              details:
                type: string
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: You can only update your own properties
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Property not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Update property
      tags:
      - Properties
  /properties/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Add an image to a property (landlord only)
      parameters:
      - description: Property ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      - description: Image caption
        in: formData
        name: caption
        type: string
      - description: Set as primary image
        in: formData
        name: is_primary
        type: boolean
      - description: Display order
        in: formData
        name: display_order
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Image added successfully
          schema:
            properties:
              image:
                $ref: '#/definitions/models.PropertyImage'
              message:
                type: string
            type: object
        "400":
          description: Invalid request data or file
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: You can only add images to your own properties
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Property not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Add property image
      tags:
      - Properties
  /properties/{id}/images/{image_id}:
    delete:
      consumes:
      - application/json
      description: Delete an image from a property (landlord only)
      parameters:
      - description: Property ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        format: uuid
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Image deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid property or image ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: You can only delete images from your own properties
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Property or image not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Delete property image
      tags:
      - Properties
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email, password, and profile information
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                $ref: '#/definitions/models.UserResponse'
            type: object
        "400":
          description: Invalid request data
          schema:
            properties:
              details:
                type: string
              error:
                type: string
            type: object
        "409":
          description: Email or phone already exists
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - Authentication
  /send-verification-email:
    post:
      consumes:
      - application/json
      description: Send a verification email to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Verification email sent
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: User already verified
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "429":
          description: Too many requests
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Send email verification
      tags:
      - Email Verification
  /sub-counties/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific sub-county
      parameters:
      - description: Sub-county ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sub-county details
          schema:
            properties:
              sub_county:
                $ref: '#/definitions/models.SubCounty'
            type: object
        "400":
          description: Invalid sub-county ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Sub-county not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get sub-county by ID
      tags:
      - Location
  /verification-status:
    get:
      consumes:
      - application/json
      description: Get the email verification status for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Verification status
          schema:
            properties:
              can_resend:
                type: boolean
              is_verified:
                type: boolean
              pending_verification:
                type: boolean
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get verification status
      tags:
      - Email Verification
  /verify-email:
    get:
      consumes:
      - application/json
      description: Verify email address using the verification token from URL parameter
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            properties:
              message:
                type: string
              user:
                $ref: '#/definitions/models.UserResponse'
            type: object
        "400":
          description: Invalid token or expired
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Token not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Verify email address via GET
      tags:
      - Email Verification
    post:
      consumes:
      - application/json
      description: Verify email address using the verification token
      parameters:
      - description: Verification token
        in: body
        name: verification
        required: true
        schema:
          $ref: '#/definitions/models.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            properties:
              message:
                type: string
              user:
                $ref: '#/definitions/models.UserResponse'
            type: object
        "400":
          description: Invalid token or expired
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Token not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Verify email address
      tags:
      - Email Verification
  /web/reset-password:
    get:
      consumes:
      - text/html
      description: Serve HTML form for password reset
      parameters:
      - description: Reset token
        in: query
        name: token
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: HTML form
          schema:
            type: string
        "400":
          description: Invalid token
          schema:
            type: string
      summary: Get password reset form
      tags:
      - web
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Process password reset form submission
      parameters:
      - description: Reset token
        in: formData
        name: token
        required: true
        type: string
      - description: New password
        in: formData
        name: password
        required: true
        type: string
      - description: Confirm new password
        in: formData
        name: confirm_password
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: Success page
          schema:
            type: string
        "400":
          description: Error page
          schema:
            type: string
      summary: Handle password reset form submission
      tags:
      - web
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
