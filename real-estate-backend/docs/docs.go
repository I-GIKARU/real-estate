// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/agents": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all agents (approved and pending)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all agents",
                "responses": {
                    "200": {
                        "description": "All agents",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "agents": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.UserResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/approve-agent/{agentId}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Approve an agent to allow property management",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Approve an agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "agentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent approved successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "agent": {
                                    "$ref": "#/definitions/models.UserResponse"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/pending-agents": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all agents waiting for admin approval",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get pending agents",
                "responses": {
                    "200": {
                        "description": "Pending agents",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "agents": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.UserResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Admin access required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change password for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Change password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "Send password reset email to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Forgot password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Reset password using reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/validate-reset-token": {
            "get": {
                "description": "Validate if a reset token is valid and not expired",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Validate reset token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/counties": {
            "get": {
                "description": "Get a list of all counties in Kenya",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location"
                ],
                "summary": "Get all counties",
                "responses": {
                    "200": {
                        "description": "List of counties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "counties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.County"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/counties/{id}": {
            "get": {
                "description": "Get detailed information about a specific county",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location"
                ],
                "summary": "Get county by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "County ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "County details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "county": {
                                    "$ref": "#/definitions/models.County"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid county ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "County not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/counties/{id}/sub-counties": {
            "get": {
                "description": "Get all sub-counties within a specific county",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location"
                ],
                "summary": "Get sub-counties by county ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "County ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sub-counties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "county_id": {
                                    "type": "integer"
                                },
                                "sub_counties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.SubCounty"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid county ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "County not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/models.UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or account deactivated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/my-properties": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all properties managed by the authenticated agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Get my properties",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of landlord's properties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "properties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.Property"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the profile of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "$ref": "#/definitions/models.UserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/properties": {
            "get": {
                "description": "Get a list of available properties with optional filtering and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Get public property listings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by county ID",
                        "name": "county_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by sub-county ID",
                        "name": "sub_county_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "apartment",
                            "house",
                            "bedsitter",
                            "studio",
                            "maisonette",
                            "bungalow",
                            "villa",
                            "commercial"
                        ],
                        "type": "string",
                        "description": "Filter by property type",
                        "name": "property_type",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum rent amount",
                        "name": "min_rent",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum rent amount",
                        "name": "max_rent",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum number of bedrooms",
                        "name": "min_bedrooms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of bedrooms",
                        "name": "max_bedrooms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum number of bathrooms",
                        "name": "min_bathrooms",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by furnished status",
                        "name": "is_furnished",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by parking availability",
                        "name": "has_parking",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of results per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of properties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "limit": {
                                    "type": "integer"
                                },
                                "offset": {
                                    "type": "integer"
                                },
                                "properties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.Property"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new property listing (agent only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Create a new property",
                "parameters": [
                    {
                        "description": "Property data",
                        "name": "property",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePropertyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Property created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "property": {
                                    "$ref": "#/definitions/models.Property"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/properties/{id}": {
            "get": {
                "description": "Get detailed information about a specific property including images",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Get a property by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "property": {
                                    "$ref": "#/definitions/models.Property"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid property ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update property information (landlord only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Update property",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Property update data",
                        "name": "property",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePropertyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "property": {
                                    "$ref": "#/definitions/models.Property"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You can only update your own properties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a property (landlord only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Delete property",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property deleted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid property ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You can only delete your own properties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/properties/{id}/images": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add an image to a property (landlord only)",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Add property image",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image caption",
                        "name": "caption",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Set as primary image",
                        "name": "is_primary",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Display order",
                        "name": "display_order",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Image added successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "image": {
                                    "$ref": "#/definitions/models.PropertyImage"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data or file",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You can only add images to your own properties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/properties/{id}/images/{image_id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an image from a property (landlord only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Properties"
                ],
                "summary": "Delete property image",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Image ID",
                        "name": "image_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image deleted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid property or image ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "You can only delete images from your own properties",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Property or image not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create a new user account with email, password, and profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/models.UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email or phone already exists",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/send-verification-email": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send a verification email to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Verification"
                ],
                "summary": "Send email verification",
                "responses": {
                    "200": {
                        "description": "Verification email sent",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "User already verified",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sub-counties/{id}": {
            "get": {
                "description": "Get detailed information about a specific sub-county",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location"
                ],
                "summary": "Get sub-county by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sub-county ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sub-county details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sub_county": {
                                    "$ref": "#/definitions/models.SubCounty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid sub-county ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Sub-county not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verification-status": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the email verification status for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Verification"
                ],
                "summary": "Get verification status",
                "responses": {
                    "200": {
                        "description": "Verification status",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "can_resend": {
                                    "type": "boolean"
                                },
                                "is_verified": {
                                    "type": "boolean"
                                },
                                "pending_verification": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verify-email": {
            "get": {
                "description": "Verify email address using the verification token from URL parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Verification"
                ],
                "summary": "Verify email address via GET",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/models.UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token or expired",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Verify email address using the verification token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email Verification"
                ],
                "summary": "Verify email address",
                "parameters": [
                    {
                        "description": "Verification token",
                        "name": "verification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "user": {
                                    "$ref": "#/definitions/models.UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token or expired",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/web/reset-password": {
            "get": {
                "description": "Serve HTML form for password reset",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "web"
                ],
                "summary": "Get password reset form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML form",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Process password reset form submission",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "web"
                ],
                "summary": "Handle password reset form submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset token",
                        "name": "token",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Confirm new password",
                        "name": "confirm_password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Amenities": {
            "type": "object",
            "additionalProperties": true
        },
        "models.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "current_password",
                "new_password"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.County": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Property"
                    }
                },
                "sub_counties": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SubCounty"
                    }
                }
            }
        },
        "models.CreatePropertyRequest": {
            "type": "object",
            "required": [
                "county_id",
                "property_type",
                "rent_amount",
                "title"
            ],
            "properties": {
                "amenities": {
                    "$ref": "#/definitions/models.Amenities"
                },
                "availability_date": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer",
                    "minimum": 0
                },
                "bedrooms": {
                    "type": "integer",
                    "minimum": 0
                },
                "county_id": {
                    "type": "integer"
                },
                "deposit_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "description": {
                    "type": "string"
                },
                "is_furnished": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "location_details": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "parking_spaces": {
                    "type": "integer",
                    "minimum": 0
                },
                "property_type": {
                    "$ref": "#/definitions/models.PropertyType"
                },
                "rent_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "square_meters": {
                    "type": "number",
                    "minimum": 0
                },
                "sub_county_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "utilities_included": {
                    "$ref": "#/definitions/models.UtilitiesIncluded"
                }
            }
        },
        "models.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone_number",
                "user_type"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id_number": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "phone_number": {
                    "type": "string"
                },
                "user_type": {
                    "$ref": "#/definitions/models.UserType"
                }
            }
        },
        "models.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.Property": {
            "type": "object",
            "properties": {
                "agent": {
                    "$ref": "#/definitions/models.User"
                },
                "agent_id": {
                    "type": "string"
                },
                "amenities": {
                    "$ref": "#/definitions/models.Amenities"
                },
                "availability_date": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer"
                },
                "bedrooms": {
                    "type": "integer"
                },
                "county": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.County"
                        }
                    ]
                },
                "county_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deposit_amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PropertyImage"
                    }
                },
                "is_available": {
                    "type": "boolean"
                },
                "is_furnished": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "location_details": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "parking_spaces": {
                    "type": "integer"
                },
                "property_type": {
                    "$ref": "#/definitions/models.PropertyType"
                },
                "rent_amount": {
                    "type": "number"
                },
                "square_meters": {
                    "type": "number"
                },
                "sub_county": {
                    "$ref": "#/definitions/models.SubCounty"
                },
                "sub_county_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "utilities_included": {
                    "$ref": "#/definitions/models.UtilitiesIncluded"
                }
            }
        },
        "models.PropertyImage": {
            "type": "object",
            "properties": {
                "bytes": {
                    "type": "integer"
                },
                "caption": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "display_order": {
                    "type": "integer"
                },
                "format": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "property": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Property"
                        }
                    ]
                },
                "property_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                },
                "secure_url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "models.PropertyType": {
            "type": "string",
            "enum": [
                "apartment",
                "house",
                "bedsitter",
                "studio",
                "maisonette",
                "bungalow",
                "villa",
                "commercial"
            ],
            "x-enum-varnames": [
                "PropertyTypeApartment",
                "PropertyTypeHouse",
                "PropertyTypeBedsitter",
                "PropertyTypeStudio",
                "PropertyTypeMaisonette",
                "PropertyTypeBungalow",
                "PropertyTypeVilla",
                "PropertyTypeCommercial"
            ]
        },
        "models.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "password",
                "token"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.SubCounty": {
            "type": "object",
            "properties": {
                "county": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.County"
                        }
                    ]
                },
                "county_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Property"
                    }
                }
            }
        },
        "models.UpdatePropertyRequest": {
            "type": "object",
            "properties": {
                "amenities": {
                    "$ref": "#/definitions/models.Amenities"
                },
                "availability_date": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "integer",
                    "minimum": 0
                },
                "bedrooms": {
                    "type": "integer",
                    "minimum": 0
                },
                "deposit_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "description": {
                    "type": "string"
                },
                "is_available": {
                    "type": "boolean"
                },
                "is_furnished": {
                    "type": "boolean"
                },
                "latitude": {
                    "type": "number"
                },
                "location_details": {
                    "type": "string"
                },
                "longitude": {
                    "type": "number"
                },
                "parking_spaces": {
                    "type": "integer",
                    "minimum": 0
                },
                "rent_amount": {
                    "type": "number",
                    "minimum": 0
                },
                "square_meters": {
                    "type": "number",
                    "minimum": 0
                },
                "title": {
                    "type": "string"
                },
                "utilities_included": {
                    "$ref": "#/definitions/models.UtilitiesIncluded"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "approved_at": {
                    "type": "string"
                },
                "approved_by": {
                    "description": "Admin who approved",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_approved": {
                    "description": "For agent approval by admin",
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "properties": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Property"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "user_type": {
                    "$ref": "#/definitions/models.UserType"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "approved_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_approved": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "profile_image_url": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_type": {
                    "$ref": "#/definitions/models.UserType"
                }
            }
        },
        "models.UserType": {
            "type": "string",
            "enum": [
                "admin",
                "tenant",
                "agent"
            ],
            "x-enum-varnames": [
                "UserTypeAdmin",
                "UserTypeTenant",
                "UserTypeAgent"
            ]
        },
        "models.UtilitiesIncluded": {
            "type": "object",
            "additionalProperties": true
        },
        "models.VerifyEmailRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Real Estate API",
	Description:      "A comprehensive API for managing real estate properties",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
